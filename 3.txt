from heapq import heappop,heappush
def prim(graph,start):
    
    mst = []
    visited = set()
    heap = []
    
    visited.add(start)
    
    for neighbour,weight in graph[start]:
        heappush(heap,(weight,start,neighbour))
        
    while len(visited)<len(graph):
        
        weight,u,v = heappop(heap)
            
        if v not in visited:
                mst.append((v,u,weight))
                visited.add(v)
                
                
                for neighbour,weight in graph[v]:
                    heappush(heap,(weight,v,neighbour))
        
            
    return mst

graph = {
    'A': [('B', 5), ('C', 4)],
    'B': [('A', 5), ('C', 3)],
    'C': [('B', 3), ('D', 1), ('A', 4)],
    'D': [('C', 1), ('A', 2)]
}
mst = prim(graph,'A')
print(mst)